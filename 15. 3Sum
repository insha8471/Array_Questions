Brute force
//Time complexity : O(n*3*log(number of unique triplet))
//space complexity : O(2*number of unique triplet) #set and list

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> st = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                for(int k=j+1;k<nums.length;k++){
                    if(nums[i]+nums[j]+nums[k] == 0){
                        List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
                        temp.sort(null);
                        st.add(temp);
                    }
                }
            }
        }
        List<List<Integer>> res = new ArrayList<>(st);
        return res;
    }
}

************************************************************************************************************************************
Better Approach
//Time complexity : O(n*2*log(number of unique triplet))
//space complexity : O(2*number of unique triplet) #set and list

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> st = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            Set<Integer> hashset = new HashSet<>();
            for(int j=i+1;j<nums.length;j++){
                int target = -(nums[i] + nums[j]);

                if(hashset.contains(target)){
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], target);
                    temp.sort(null);
                    st.add(temp);                    
                }
                hashset.add(nums[j]);
            }
        }
        List<List<Integer>> res = new ArrayList<>(st);
        return res;
    }
}

****************************************************************************************************************************

Optimal Approach
//Time complexity : O(Nlog(N) + N*2)
//space complexity : O(1) 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i != 0 && nums[i] == nums[i-1]) continue;
            int j = i+1;
            int k = nums.length-1;
            while(j < k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum > 0){
                    k--;
                }else if(sum < 0){
                    j++;
                }else{
                    List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
                    res.add(temp);
                    j++;
                    k--;
                    //skip the duplicate element..
                    while(j < k && nums[j] == nums[j-1]) j++;
                    while(j < k && nums[k] == nums[k+1]) k--;
                }
            }
        }
        return res;
    }
}
